#!/usr/bin/env perl
use strict;
use warnings;

package Putweet;
use Class::Accessor::Lite (
    new => 1,
    rw  => [qw/
        dispatch menu nt term user user_list config count per last_updated statuses tl_types
        _blocking_users _followers _friends _user_info _list_memberships _favs cache
    /],
);
use Cache::Memory::Simple;
use Config::Pit qw/pit_get pit_set/;
use Clone qw/clone/;
use Data::Dumper qw/Dumper/;
use Encode qw/find_encoding/;
use Furl;
use HTML::Entities qw/decode_entities/;
use JSON::XS ();
#use Net::Twitter;
use Net::Twitter::Lite::WithAPIv1_1;
use String::Filter;
use Term::ANSIColor qw/colored/;
use Term::ReadKey qw/GetTerminalSize/;
use Term::ReadLine;
use Time::Piece;
use LWP::UserAgent;
use YAML::Syck qw/Load/;
use XML::Simple qw/XMLin/;

$| = 1;
$XML::Simple::PREFERRED_PARSER = "XML::Parser";
$YAML::Syck::ImplicitUnicode = 1;

my $utf = find_encoding("utf-8");
sub utf { $utf }

my $furl = Furl->new;
sub furl { $furl }

my $ua = LWP::UserAgent->new(timeout => 3);
sub ua { $ua }

sub clear { system('clear') + 1 }

sub sayf {
    my ($format, @list) = @_;
    if (@list) {
        printf "$format\n", @list;
    } else {
        $format ||= "";
        print "$format\n";
    }
}

sub p {
    #local $Data::Dumper::Indent   = 1;
    local $Data::Dumper::Sortkeys = 1;
    local $Data::Dumper::Terse    = 1;
    warn Dumper \@_;
    $ENV{PT_DEBUG} or return;
    my @c = caller;
    print STDERR "  at $c[1]:$c[2]\n\n"
}

my @shorten_domains_ary = qw/
    buff.ly
    bit.ly
    htn.to
    feedly.com
    nico.ms
    t.co
    p.tl
/;
my %shorten_domains;
@shorten_domains{@shorten_domains_ary} = (1) x @shorten_domains_ary;

my $sf = String::Filter->new(
    rules => [
        '\@[a-zA-Z0-9_]+' => sub {
            my $screen_name = shift;
            return colored(["cyan"], $screen_name);
        },
        '#[^\s　]+' => sub {
            my $hashtag = shift;
            return colored(["blue"], $hashtag);
        },
    ]
);
my $sf_expand_url = String::Filter->new(
    rules => [
        'https?://[a-zA-Z0-9\.?/&]+' => sub {
            my $url = shift;
            $url = utf->encode($url);
            my $expand = $url;
            my ($domain) = $url =~ m{^https?://([a-zA-Z0-9\.]+)};
            while ($shorten_domains{$domain}) {
                $expand = expand_short_url($url);
                ($domain) = $expand =~ m{^https?://([a-zA-Z0-9\.]+)};
            }
            return $expand;
        },
    ]
);

sub parse_time {
    my $created_at = shift;
    my $utc = Time::Piece->strptime($created_at, '%a %b %d %H:%M:%S %z %Y');
    my $jst = localtime($utc->epoch);
    return $jst;
}

sub left {
    my ($length, $str) = @_;
    my $format = '%'. -$length . 's';
    return sprintf "$format", $str;
}

sub line {
    my $line = shift || "-";
    return $line x width();
}

sub width { (GetTerminalSize)[0] }

sub expand_short_url {
    my $url = shift;
    ua->head($url)->request->uri->as_string;
}

sub status_key { "status_$_[0]" }

my %DAY_MAP = qw/
    Mon 月
    Tue 火
    Wed 水
    Thu 木
    Fri 金
    Sat 土
    Sun 日
/;

my $HISTORY_FILE = "$ENV{HOME}/.putweet_history";

sub init {
    my ($self, @args) = @_;

    my $data = do {local $/ = undef; <main::DATA>};
    $data = Load $data;

    $self->init_accessor;
    $self->init_menu($data);
    $self->init_nt;

    my $user_list = pit_get('putweet_user_list');
    $self->user_list($user_list);

    open my $fh, "<", $HISTORY_FILE;
    for my $in (<$fh>) {
        chomp $in;
        $self->term->addhistory((split /;/, $in)[1]);
    }
    $self->change_user;
    return $self;
}
sub init_accessor {
    my ($self, $data) = @_;
    $self->cache(Cache::Memory::Simple->new);
    $self->config(+{});
    $self->dispatch(+{});
    $self->statuses(+{});
    $self->last_updated(+{});
    $self->tl_types([qw/home_timeline mentions retweets_of_me/]);#direct_messages favorites
    $self->statuses->{$_} = +{} for $self->tl_types_array;
    $self->count(20);
    $self->per(60 * 5);
    $self->term(Term::ReadLine->new(''));
}
sub init_menu {
    my ($self, $data) = @_;

    my $menu = sprintf "%s%s%s%s%s\n%%s\n", left(10, 'type'), left(5, 'key'), left(20, 'method'), left(21, 'args'), "explanation";

    my @menu_items = @{$data->{menu}->{item}};
    my $menu_contents = $data->{menu}->{contents};

    for (my $i = 0; $i < @menu_items; $i++) {
        $menu .= "$menu_items[$i]\n";
        for my $contents (@{$data->{menu}->{contents}->[$i]}) {
            my ($key, $method, $args, $explanation) = @$contents;
            $explanation ||= '';
            my $str = sprintf "%s%s%s%s%s\n", ' ' x 10, left(5, $key), left(20, $method), left(21, $args), $explanation;
            $menu .= $str;
            $self->dispatch->{$key} = $method;
        }
    }
    $self->menu($menu);
}
sub init_nt {
    my ($self, $data) = @_;
    my $c = pit_get('putweet');
    unless (%$c) {
        clear;
        sayf "there is no putweet oauth info. input your application info to use as an alternative." and sayf;
        my $consumer_key    = $self->term->readline('consumer_key :');
        my $consumer_secret = $self->term->readline('consumer_secret :');
        my $traits = [qw/API::Lists API::REST API::Search OAuth/];
        $c = {
            consumer_key => $consumer_key,
            consumer_secret => $consumer_secret,
            traits => $traits,
        };
        my $nt = Net::Twitter::Lite::WithAPIv1_1->new(%$c);

        sayf "\ngo to the url, and input PIN you got.\n\n", $nt->get_authorization_url, "\n";

        my $pin = $self->term->readline('pin :');
        my ($access_token, $access_token_secret, $user_id, $screen_name) = $nt->request_access_token(verifier => $pin);
        my $putweet_user = {
            $screen_name => {
                access_token => $access_token,
                access_token_secret => $access_token_secret,
                config => {
                    tweetable => 1,
                    show_main_menu => 1,
                    show_react_menu => 1,
                    show_client_source => 0,
                },
            },
        };

        pit_set("putweet", data => $c);
        pit_set("putweet_user_list", data => $putweet_user);

        ### OBSOLETE: basic auth
        #my $username = $self->term->readline('username? :');
        #my $password = $self->term->readline('password? :');
        ## I am not as kind as use Term::ReadPassword
        #$self->user($username);
        #my %c = (
        #    traits   => [qw/API::Lists API::REST API::Search/],
        #    username => $username,
        #    password => $password,
        #);
        #return $self->nt(Net::Twitter::Lite::WithAPIv1_1->new(%c));
    }
    $self->nt(Net::Twitter::Lite::WithAPIv1_1->new(%$c));
}

sub fix_source {
    my ($self, $source) = @_;
    $source ||= "";
    my $source_url = "";

    if ($source) {
        $source = decode_entities $source;
        $source =~ m{<.*?href="(.*?)".*?>(.+)</a>} and $source_url = $1 and $source = $2;
        $source_url and $self->config->{show_client_source} and $source .= " $source_url";
        $source = "via $source";
        $source = utf->encode($source) if utf8::is_utf8($source);
    }
    return ($source, $source_url);
}

sub expand_entities {
    my ($self, $status) = @_;

    my $entities = $status->{entities};
    if (my $medias = $entities->{media}) {
        for my $media (@$medias) {
            $status->{text} =~ s/\Q$media->{url}\E/$media->{expanded_url}/;
        }
    }
    else {
        my $urls = $entities->{urls};
        for my $url (@$urls) {
            $status->{text} =~ s/\Q$url->{url}\E/$url->{expanded_url}/;
        }
    }
    return $status;
}

sub passed {
    my ($self, $type, $screen_name) = @_;
    $screen_name ||= $self->user;

    my $ret;

    if (ref $self->last_updated->{$type}->{$screen_name}) {
        my $diff = (scalar localtime) - $self->last_updated->{$type}->{$screen_name};
        $ret = ($diff->seconds < $self->per) ? 0 : 1;
    }
    else {
        $ret = 1;
    }

    $ret;
}

sub tl_types_array {
    my ($self) = @_;
    @{$self->tl_types}
}

sub say_menu {
    my ($self) = @_;
    sayf $self->menu, "=" x width
        if $self->config->{show_main_menu};
}

sub init_statuses {
    my $self = shift;

    my %tl_opt = (
        favorites => +{id => $self->user},
    );
    for my $tl_name ($self->tl_types_array) {
        my $opt = $tl_opt{$tl_name} || +{};
        $opt = +{
            %$opt,
            include_rts => 1,
            include_entities => 1,
        };
        my $statuses = $self->nt->$tl_name($opt);
        for my $status (@$statuses) {
            $status->{id} or next;# sometimes api return blank data
            $status = $self->expand_entities($status);
            $self->statuses->{$tl_name}->{$status->{id}} = $status;
        }
        sayf "got $tl_name";
    }
    sayf "update!";
    $self->last_updated->{basic}->{$self->user} = scalar localtime;
}

sub update_statuses {
    my ($self) = @_;
    $self->passed("basic") or return;

    $self->init_statuses;
}

sub clear_statuses {
    my ($self) = @_;

    $self->$_(+{}) for qw/statuses last_updated/;
    $self->done("clear !");
}

sub run {
    my ($self, ) = @_;
    $self->main_loop;
}

sub main_loop {
    my ($self, @args) = @_;
    $self->last_updated->{basic}->{$self->user} ||= ((scalar localtime) - 60 * 10);

    clear;
    printf "login as: %s  last update: %s\n\n", $self->user, $self->last_updated->{basic}->{$self->user}->hms;

    if (@args and my $func = $self->dispatch->{shift @args}) {
        eval { $self->$func(@args) };
        sayf $@ if $@;
    }
    else {
        $self->say_menu;
    }
    my $input = $self->term->readline('putweet ');
    if ($input && (length $input != 1)) {
        $self->record_history(+{input => $input});
    }
    $self->main_loop(split ' ', $input);
}

sub record_history {
    my ($self, $args) = @_;
    my $input = $args->{input};

    (my $dt = localtime->datetime) =~ s/T/ /;
    open my $fh, ">>", $HISTORY_FILE;
    print $fh "$dt;$input\n";
}

sub done {
    my ($self, $message) = @_;

    sayf $message || "";
    my $done = $self->term->readline("done.");
    $self->main_loop;
}

sub block_user {
    my ($self, $screen_name) = @_;
    return $self->done("args: user_id/screen_name.") unless $screen_name;
    $self->confirm($screen_name) or $self->main_loop;
    $self->nt->create_block($screen_name);
    $self->done("block: $screen_name");
}

sub unblock_user {
    my ($self, $screen_name) = @_;
    return $self->done("args: user_id/screen_name.") unless $screen_name;
    $self->nt->destroy_block($screen_name);
    $self->done("unblock: $screen_name");
}

sub show_blocking {
    my $self = shift;

    sayf $self->_blocking_users and return $self->done if $self->_blocking_users;
    my $bloking_users;
    my $users = $self->nt->blocking;
    for my $user (@$users) {
        my ($user_id, $name) = ((sprintf "%-9s", $user->{id}), $user->{screen_name});
        $bloking_users .= "$user_id $name\n";
    }
    $self->_blocking_users($bloking_users);
    sayf $self->_blocking_users and return $self->done;
}

sub report_spam {
    my ($self, $screen_name) = @_;
    return $self->done("args: id/screen_name") unless $screen_name;
    $self->confirm($screen_name) or $self->main_loop;
    $self->nt->report_spam($screen_name);
    $self->done("report spam and block: $screen_name");
}

sub change_user {
    my ($self, $error) = @_;
    return $self->done("you can't do this.") unless $self->user_list;

    clear and $error and sayf $error;

    my $i = 1;
    for my $u (keys %{$self->user_list}) {
        sayf $i++ . ": $u";
    }
    sayf;
    $i = $self->term->readline("which user?: ");
    $i =~ /^\d+$/ and $i-- or return $self->change_user("input error.");
    my @user_list = %{$self->user_list};
    my $user = $user_list[$i * 2];

    my $c_user = $self->user_list->{$user} or return $self->change_user("input error.");
    $self->nt->access_token($c_user->{access_token});
    $self->nt->access_token_secret($c_user->{access_token_secret});
    $self->user($user);
    $self->config($c_user->{config});
    $self->$_(undef) for qw/_blocking_users _user_info _favs/;
    $self->$_(+{}) for qw/_followers _friends _list_memberships/;
    $self->last_updated->{basic}->{$self->user} = 0;
    $self->statuses->{$_} = {} for $self->tl_types_array;
    sayf 'getting statuses...';
    #$self->init_statuses;

    $self->done("user: $user");
}

sub destroy_status {
    my ($self, $args) = @_;
    $args or return $self->done('args: status_id[,status_id|-status_id]');

    if (ref $args) {
        my @ids = @$args;
        sayf '-%s', utf->encode($self->statuses->{user_timeline}->{$self->user}->{$_}->{text}) for @ids;

        $self->confirm("delete these ?") or $self->main_loop;

        for my $id (@ids) {
            $self->nt->destroy_status({id => $id});
            sayf "destroy_status(%s)", utf->encode($self->statuses->{user_timeline}->{$self->user}->{$id}->{text});
            delete $self->statuses->{user_timeline}->{$self->user}->{$id};
        }
    }
    else {
        my $id = $args;
        my $status = $self->statuses->{user_timeline}->{$self->user}->{$id};
        $status->{user}{screen_name} eq $self->user or return $self->done("the status is not yours");

        $self->confirm(utf->encode($status->{text})) or $self->main_loop;

        $self->nt->destroy_status({id => $id});
        delete $self->statuses->{user_timeline}->{$self->user}->{$id};
    }

    $self->last_updated->{user_timeline}->{$self->user} = undef if ! keys %{$self->statuses->{user_timeline}->{$self->user}};

    $self->done;
}

sub show_status {
    my ($self, $id) = @_;
    $id or return $self->done('args: status id');

    my $status = $self->cache->get_or_set(
        status_key($id), sub {
            $self->nt->show_status({id => $id, include_entities => 1});
        }
    );
    $status = $self->expand_entities($status);
    $self->print_status([$status]);
    $self->ask_reaction([$status]);
}

sub direct_messages {
    my ($self, $count) = @_;
    $count ||= $self->count;

    $self->update_statuses;
    my $statuses = $self->statuses->{direct_messages};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses) and $self->done;
}

sub create_friend {
    my ($self, $screen_name) = @_;
    $screen_name or return $self->done('args: id/screen_name');

    $self->nt->create_friend(+{screen_name => $screen_name});
    $self->done("now following $screen_name.");
}

sub destroy_friend {
    my ($self, $screen_name) = @_;
    $screen_name or return $self->done('args: id/screen_name');
    $self->confirm($screen_name) or $self->main_loop;

    $self->nt->destroy_friend(+{screen_name => $screen_name});
    $self->done("destroy friendship $screen_name.");
}

sub rel_exists {
    my ($self, $id1, $id2) = @_;
    $id1 or return $self->done('args: screen_name{1,2}');
    $id2 or do { $id2 = $id1; $id1 = $self->user; };

    my $res1 = $self->nt->show_friendship(+{source_screen_name => $id1, target_screen_name => $id2});
    my $res2 = $self->nt->show_friendship(+{source_screen_name => $id2, target_screen_name => $id1});
    my $bool1 = $res1->{relationship}->{source}->{following} == JSON::XS::true ? 1 : 0;
    my $bool2 = $res2->{relationship}->{source}->{following} == JSON::XS::true ? 1 : 0;
    my %rel = (0 => 'NOT ', 1 => '');

    sayf '%s %sfollowing %s', $id1, $rel{$bool1}, $id2;
    sayf '%s %sfollowing %s', $id2, $rel{$bool2}, $id1;
    $self->done;
}

sub home_timeline {
    my ($self, $count) = @_;
    $count ||= $self->count;

    $self->update_statuses;
    my $statuses = $self->statuses->{home_timeline};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses);
    $self->ask_reaction($statuses);
}

sub mentions {
    my ($self, $count) = @_;
    $count ||= $self->count;

    $self->update_statuses;
    my $statuses = $self->statuses->{mentions};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses);
    $self->ask_reaction($statuses);
}

sub update {
    my ($self, @args) = @_;
    $args[0] or $self->done('args: status');

    unless ($self->config->{tweetable}) {
        sayf "you are not tweetable." and return $self->done;
    }
    my $post_param;
    if ($args[0] =~ m/^\d+$/) {
        $post_param->{in_reply_to_status_id} = shift @args;
    }

    my $status = join " ", @args;
    my $_status = utf->decode($status);
    if (140 < length $_status) {
        sayf "status cut 140 chars.";
        $status = substr($_status, 0, 140);
        $status = utf->encode($status);
    }
    $post_param->{status} = utf->decode($status);
    sayf "status: $status";
    sayf "length: ". length utf->decode($status);
    sayf;

    $self->nt->update($post_param) if $self->term->readline("ok? (y/n): ") eq 'y';
    $self->done;
}

sub new_direct_message {
    my ($self, @args) = @_;
    my $screen_name = shift @args;
    my $text = join " ", @args;
    $screen_name and $text or $self->done('args: screen_name, text');
    $self->confirm("$screen_name: $text");
    $self->nt->new_direct_message($screen_name, utf->decode($text));
    $self->done("send done");
}

sub user_timeline {
    my ($self, $screen_name, $count, $page, $max_id) = @_;
    $screen_name or return $self->done('args: id/screen_name');
    $count ||= $self->count;
    $page  ||= 0;
    $max_id ||= 0;

    my $statuses;
    if ($self->passed(user_timeline => $screen_name)) {
        $statuses = $self->nt->user_timeline({
            screen_name => $screen_name, count => $count, include_rts => 1, include_entities => 1,
            page => $page, ($max_id ? (max_id => $max_id) : ()),
        });
        for my $status (@$statuses) {
            $status = $self->expand_entities($status);
            $self->statuses->{user_timeline}->{$screen_name}->{$status->{id}} = $status;
        }
        $self->last_updated->{user_timeline}->{$screen_name} = scalar localtime if @$statuses;
    }
    $statuses = $self->statuses->{user_timeline}->{$screen_name};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses);
    $self->ask_reaction($statuses);
}

sub print_status {
    my ($self, $statuses, $opt) = @_;

    @$statuses = reverse @$statuses;
    my $i = @$statuses;
    for my $status (@$statuses) {
        my $org_status;
        if ($status->{retweeted_status}) {
            $org_status = clone $status;
            $org_status = $self->expand_entities($org_status);
            $status = clone $status->{retweeted_status};
            $status = $self->expand_entities($status);
        }
        my ($source, $source_url) = $self->fix_source($status->{source});

        my $reply_to = ($status->{in_reply_to_status_id} and $status->{in_reply_to_screen_name}) ?
            colored(["cyan"], "in reply to $status->{in_reply_to_screen_name}") : '';

        $status->{text} = $sf->filter($status->{text});
        $status->{text} = $sf_expand_url->filter($status->{text}) if $self->config->{expand_url};

        my $t = parse_time($status->{created_at});
        my $num = sprintf '%2d', $i;

        my $_screen_name = ($status->{user}{screen_name} or $status->{sender}{screen_name} or $status->{from_user});
        if ($org_status) {
            $_screen_name = colored(["green"], $_screen_name);
            $_screen_name .= " (RT:$org_status->{user}{screen_name})";
            $status->{text} =~ s/^RT @.+?//;
        }
        my $retweet_count = "";
        if ($retweet_count = $status->{retweet_count}) {
            $retweet_count = colored(["green"], "($retweet_count Retweeted)");
        }

        sayf line("=");
        sayf join " ", grep {$_}
            "[$num]", $t->ymd('/'), "($DAY_MAP{$t->day})", $t->hms,
            $_screen_name,
            $status->{id}, $source, $reply_to, $retweet_count;
        sayf;
        sayf decode_entities utf->encode($status->{text});

        $i--;
    }
    sayf line("=");
}

sub ask_reaction {
    my @caller = caller;
    my ($self, $statuses) = @_;

    if ($self->config->{show_react_menu}) {
        sayf and sayf join "\n",
            "-" x width,
            "  [number] : reply",
            " w[number] : show user's info",
            " R[number] : RT (official)",
            " r[number] : RT (unofficial)",
            " t[number] : RT (unofficial and without in_reply_to_status_id)",
            " T[number] : show official RTed users",
            " f[number] : follow time line",
            " e[number] : favorite the status",
            " s[number] : show user's timeline",
            " n[number] : report for spam",
            " b[number] : block user",
            " d[number] : delete your status",
            " v[number] : show user's favorited",
            " x[number] : show relation between the user",
            " u[number] : show permalink the tweet",
            " a[number] : show the tweet",
            "  [other]  : end",
            "-" x width;
    }

    sayf;
    my $in = $self->term->readline('input: ');
    sayf;

    my ($c, $n);
    $in =~ /^([a-zA-Z0-9])([\d,\-]+)$/;
    $c = $1 || "";
    $n = $2 || "";

    if ($in =~ /^(\d+)$/) {
        $n = $1;
    }

    my $status;

    if ($n =~ /^\d+$/) {
        $statuses->[$n * -1] or return $self->done("invalid input.");
        $n *= -1;
        $status = $statuses->[$n];
    }

    if ($n and !$c) {
        sayf "reply to: \@$status->{user}{screen_name}: " . utf->encode(decode_entities $status->{text});
        my $text = $self->term->readline('@' . $status->{user}{screen_name} . ' ');
        $text = "\@$status->{user}{screen_name} $text";
        $self->update($status->{id}, $text);
    }
    elsif ($c eq "w") {
        my $screen_name = $status->{from_user} || $status->{user}{screen_name};
        $self->record_history(+{input => "w $screen_name"});
        $self->show_user($screen_name);
    }
    elsif ($c eq "R") {
        my $id = $status->{id};
        $self->retweet($id);
    }
    elsif ($c eq "r" or $c eq "t") {
        sayf $c eq 'r' ? 'with in_reply_to_status_id' : 'without in_reply_to_status_id';
        sayf "RT to: \@$status->{user}{screen_name}: " . utf->encode($status->{text});
        my $text = $self->term->readline('str: ');
        $text = sprintf '%s RT @%s ', $text, utf->encode("$status->{user}{screen_name}: $status->{text}");
        $c eq 't' ? $self->update($text) : $self->update($status->{id}, $text);
    }
    elsif ($c eq "T") {
        my $id = $status->{id};
        my $retweeters = $self->nt->retweeters($id);
        for my $i (@{$retweeters->{ids}}) {
            my $user = $self->nt->show_user(+{id => $i});
            sayf $user->{screen_name};
        }
    }
    elsif ($c eq "f") {
        clear;
        my $reply_id = $status->{in_reply_to_status_id};
        if ($reply_id) {
            $self->record_history(+{input => sprintf('a %d # %s', $status->{id}, $status->{user}{screen_name})});
            print "getting tweets ";
            my @follow_statuses = ($status);
            while ($reply_id) {
                my $parent_status = $self->cache->get_or_set(
                    status_key($reply_id), sub {
                        $self->nt->show_status({id => $reply_id, include_entities => 1});
                    }
                );

                $parent_status = $self->expand_entities($parent_status);
                unshift @follow_statuses, $parent_status;
                $self->record_history(+{input => sprintf('a %d # %s', $reply_id, $parent_status->{user}{screen_name})});
                print ".";
                $reply_id = $parent_status->{in_reply_to_status_id} or 0;
            }
            sayf;
            $self->print_status(\@follow_statuses);
            return $self->ask_reaction(\@follow_statuses);
        }
        else {
            sayf "can not follow. there is no 'in_reply_to_status_id'";
        }
    }
    elsif ($c eq "e") {
        my $id = $status->{id};
        my $screen_name = $status->{from_user} || $status->{user}{screen_name};
        my $text = utf->encode($status->{text});
        $self->nt->create_favorite($id) and return $self->done("favorite:\n$screen_name\:$text");
    }
    elsif ($c eq "s") {
        my $screen_name = $status->{from_user} || $status->{user}{screen_name};
        $self->record_history(+{input => "s $screen_name"});
        $self->user_timeline($screen_name);
    }
    elsif ($c eq "n") {
        my $screen_name = $status->{from_user} || $status->{user}{screen_name};
        $self->report_spam($screen_name);
    }
    elsif ($c eq "d") {
        if ($status) {
            my $id = $status->{id};
            $self->destroy_status($id);
        }
        elsif ($n) {
            my @ids;

            my @parts = split /,/, $n;
            for my $i (@parts) {
                if ($i =~ /^\d+$/) {
                    push @ids, $statuses->[$i * -1]->{id} if $statuses->[$i * -1]->{id};
                }
                elsif ($i =~ /^(\d+)-(\d+)$/) {
                    for my $id ($1 .. $2) {
                        push @ids, $statuses->[$id * -1]->{id};
                    }
                }
            }

            $self->destroy_status(\@ids);
        }
    }
    elsif ($c eq "b") {
        my $screen_name = $status->{from_user} || $status->{user}{screen_name};
        $self->block_user($screen_name);
    }
    elsif ($c eq "v") {
        my $screen_name = $status->{from_user} || $status->{user}{screen_name};
        $self->favorited($screen_name);
    }
    elsif ($c eq "x") {
        $self->rel_exists($status->{user}{screen_name});
    }
    elsif ($c eq "u") {
        sayf "http://twitter.com/%s/status/%s", ($status->{from_user} or $status->{user}{screen_name}), $status->{id};
    }
    elsif ($c eq "a") {
        my $id = $status->{id};
        $self->show_status($id);
    }

    $self->done;
}

sub confirm {
    my ($self, @value) = @_;
    my $method = (split /::/, (caller 1)[3])[-1];
    sayf "$method(@value)\n";
    $self->term->readline("do ok? (y/n): ") eq 'y';
}

sub show_user {
    my ($self, $id) = @_;
    defined $id or $id = $self->user;
    #say $self->_user_info->{body} and return $self->done
    #if $self->_user_info and $self->_user_info->{id} eq $id;

    my %res = %{$self->nt->show_user(+{screen_name => $id})};
    my %filterd;
    my @want = qw/id name screen_name lang url description location time_zone
                  statuses_count created_at friends_count followers_count protected verified listed_count/;
    @filterd{@want} = @res{@want};
    my $t = parse_time($filterd{created_at});
    $filterd{created_at} = join " ", $t->ymd('/'), "(@{[$t->day]})", $t->hms;
    for my $key (qw/protected verified/) {
        if (JSON::XS::is_bool $filterd{$key}) {
            $filterd{$key} = $filterd{$key} == JSON::XS::true ? 1 : 0;
        }
        else {
            $filterd{$key} = $filterd{$key} ? 1 : 0;
        }
    }

    my %user_info;
    $user_info{id} = $id;
    for my $key (@want) {
        length $filterd{$key} or $filterd{$key} = '';
        $filterd{$key} =~ s/\r?\n/ /g;
        decode_entities $filterd{$key};

        my $s1 = 55;
        my $s2 = $s1 - 15;
        if ($s1 < (length $filterd{$key})) {
            no warnings;
            my $rest = substr $filterd{$key}, 0, $s2;
            $filterd{$key} = substr $filterd{$key}, $s2;
            $rest = utf->encode($rest) if utf8::is_utf8($rest);
            my $key2 = sprintf "%-15s", $key;
            $user_info{body} .= "$key2 $rest\n";
            while ($filterd{$key}) {
                $rest = substr $filterd{$key}, 0, $s1;
                $filterd{$key} = substr $filterd{$key}, $s1;
                $rest = utf->encode($rest) if utf8::is_utf8($rest);
                $user_info{body} .= " " x 16 . "$rest\n";
            }
        }
        else {
            $filterd{$key} = utf->encode($filterd{$key}) if $filterd{$key} and utf8::is_utf8($filterd{$key});
            $filterd{$key} = $sf->filter($filterd{$key});
            $filterd{$key} = $sf_expand_url->filter($filterd{$key}) if $self->config->{expand_url};

            my $key2 = sprintf "%-15s", $key;
            $user_info{body} .= "$key2 $filterd{$key}\n";
        }
    }
    sayf $user_info{body};
    $self->_user_info(\%user_info) if $id eq $self->user;
    $self->done;
}

sub retweet {
    my ($self, $id) = @_;
    $id or return $self->done('args: status id');

    my $status = $self->cache->get_or_set(
        status_key($id), sub {
            $self->nt->show_status({id => $id, include_entities => 1});
        }
    );
    $self->print_status([$status]);
    $self->confirm("do official retweet ?") or return $self->done;
    $self->nt->retweet($id);
    $self->done;
}

sub followers {
    my ($self, $screen_name) = @_;
    $screen_name ||= $self->user;

    sayf $self->_followers->{$screen_name} and return $self->done if $self->_followers->{$screen_name};

    my $followers;
    $followers .= "$_->{screen_name} " for @{$self->nt->followers({screen_name => $screen_name})->{users}};
    $self->_followers->{$screen_name} = $followers;
    sayf "$screen_name followers";
    sayf $self->_followers->{$screen_name} and return $self->done;
}

sub friends {
    my ($self, $screen_name) = @_;
    $screen_name ||= $self->user;

    sayf $self->_friends->{$screen_name} and return $self->done if $self->_friends->{$screen_name};

    my $friends;
    $friends .= "$_->{screen_name} " for @{$self->nt->friends({screen_name => $screen_name})->{users}};
    $self->_friends->{$screen_name} = $friends;
    sayf "$screen_name following";
    sayf $self->_friends->{$screen_name} and return $self->done;
}

sub retweets_of_me {
    my ($self, $count) = @_;
    $count ||= $self->count;

    $self->update_statuses;
    my $statuses = $self->statuses->{retweets_of_me};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses) and $self->done;
}

sub retweeted_by_user {
    my ($self, $screen_name, $count, $page) = @_;
    $screen_name ||= $self->user;
    $count ||= $self->count;
    $page  ||= 0;

    my $statuses;
    if ($self->passed(retweeted_by_user => $screen_name)) {
        $statuses = $self->nt->retweeted_by_user({
            screen_name => $screen_name, count => $count, include_entities => 1,
            page => $page,
        });
        for my $status (@$statuses) {
            $status = $self->expand_entities($status);
            $self->statuses->{retweeted_by_user}->{$screen_name}->{$status->{id}} = $status;
        }
        $self->last_updated->{retweeted_by_user}->{$screen_name} = scalar localtime;
    }
    $statuses = $self->statuses->{retweeted_by_user}->{$screen_name};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses);
    $self->ask_reaction($statuses);
}

sub list_memberships {
    my ($self, $screen_name) = @_;
    $screen_name ||= $self->user;
    sayf $self->_list_memberships->{$screen_name} and return $self->done
        if $self->_list_memberships->{$screen_name};

    my $lists = $self->nt->list_memberships({user => $screen_name, cursor => -1});
    my ($_list_memberships, @list_memberships);

    my $i = 1;
    do {
        for my $list (@{$lists->{lists}}) {
            my $str = $list->{description} || '';
            $str = utf->encode($str) if utf8::is_utf8($str);
            $list->{full_name} = utf->encode($list->{full_name}) if utf8::is_utf8($list->{full_name});
            push @list_memberships, "$list->{full_name} :$str\n";
        }
        my $lists_next = $self->nt->list_memberships({user => $screen_name, cursor => $lists->{next_cursor}});
        $lists = $lists->{next_cursor} ? $lists_next : undef;
    } while $lists;

    $_list_memberships .= "list number: " . @list_memberships . "\n\n";
    $_list_memberships .= $_ for @list_memberships;
    $self->_list_memberships->{$screen_name} = ($_list_memberships);
    sayf $self->_list_memberships->{$screen_name} and return $self->done;
}

sub all_lists {
    my ($self, $screen_name) = @_;
    $screen_name ||= $self->user;

    my $lists = $self->nt->list_subscriptions({screen_name => $screen_name});
    for my $list (@$lists) {
        sayf "- %s / %d", $list->{name}, $list->{id};
    }
    return $self->done;
}

sub list_statuses {
    my ($self, $list_name, $screen_name, $count, $page, $max_id) = @_;
    $list_name or return $self->done('invalid args');
    $screen_name ||= $self->user;
    $count ||= $self->count;
    $page  ||= 0;
    $max_id ||= 0;

    my $statuses;
    if ($self->passed("list_$list_name" => $screen_name)) {
        $statuses = $self->nt->list_statuses({
            list_id => $list_name, owner_screen_name => $screen_name, count => $count, include_rts => 1, include_entities => 1,
            page => $page, ($max_id ? (max_id => $max_id) : ()),
        });
        for my $status (@$statuses) {
            $status = $self->expand_entities($status);
            $self->statuses->{"list_$list_name"}->{$screen_name}->{$status->{id}} = $status;
        }
        $self->last_updated->{"list_$list_name"}->{$screen_name} = scalar localtime if @$statuses;
    }
    $statuses = $self->statuses->{"list_$list_name"}->{$screen_name};
    $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    $self->print_status($statuses);
    $self->ask_reaction($statuses);
}

sub search {
    my ($self, @words) = @_;
    @words or return $self->done('args: word[s]');

    my $word = join " ", @words;
    $word = utf->decode($word);
    my $statuses = $self->nt->search({q => $word, lang => 'ja', include_entities => 1})->{statuses};
    for my $status (@$statuses) {
        $status = $self->expand_entities($status);
    }
    $self->print_status($statuses, 1);
    $self->ask_reaction($statuses);
    $self->done;
}

sub favorites {
    my ($self, $screen_name) = @_;

    my $statuses;
    if ($screen_name) {
        $statuses = $self->nt->favorites({id => $screen_name});
    }
    else {
        $screen_name = $self->user;
        $self->update_statuses;
        $statuses = $self->statuses->{favorites};
        $statuses = [map {$statuses->{$_}} sort {$b <=> $a} keys %$statuses];
    }
    $self->print_status($statuses);
    $self->ask_reaction($statuses);
    $self->done;
}

sub help {
    my ($self, @args) = @_;
    sayf "ソース嫁" and $self->done
}

sub favorited {
    my ($self, $screen_name) = @_;
    $screen_name ||= $self->user;

    #sayf $self->_favs->{$screen_name} and $self->done
    #    if $self->_favs and $self->_favs->{$screen_name};

    my $favs;
    my $xml = XMLin(furl->get("http://ja.favstar.fm/users/$screen_name/rss")->content);

    my $item = $xml->{channel}->{item} or $self->done("no favorited tweets.");
    for my $i (reverse @$item) {
        my $str = decode_entities(utf->encode($i->{title}));
        $str =~ s/stars?/favs/;
        $favs .= "$str\n";
    }
    my $_favs = $self->_favs;
    $_favs->{$screen_name} = $favs;
    $self->_favs($_favs);
    sayf $self->_favs->{$screen_name} and $self->done;
}

sub change_config {
    my ($self, $item, $value) = @_;

    if ($item) {
        if (defined $value) {
            sayf "$item -> $value";
            $self->config->{$item} = $value;
        }
        else {
            delete $self->config->{$item};
        }

        my $user_list = pit_get('putweet_user_list');
        $user_list->{$self->user}->{config} = $self->config;
        pit_set("putweet_user_list", data => $user_list);
        $self->done('configed.');
    }
    else {
        sayf "your config";
        p $self->config;
        $self->done;
    }
}

sub quit {
    my ($self, @args) = @_;
    sayf "bye." and exit
}

package main;
Putweet->new->init->run;

__DATA__
menu:
  item:
    - timeline
    - status
    - user
    - message
    - friend
    - block
    - lists
    - favorites
    - search
    - system
  contents:
    -
      -
        - f
        - home_timeline
        - count?
        - ~
      -
        - m
        - mentions
        - count?
        - ~
      -
        - s
        - user_timeline
        - user_id/screen_name
        - show one user's timeline
      -
        - t
        - retweets_of_me
        - count?
        - show your RTed status
      -
        - T
        - retweeted_by_user
        - screen_name?
        - show one user's RT
    -
      -
        - a
        - show_status
        - status_id
        - show the id's status
      -
        - y
        - destroy_status
        - status_id
        - ~
      -
        - u
        - update
        - status
        - ~
      -
        - D
        - new_direct_message
        - screen_name, text
        - send direct message
    -
      -
        - i
        - friends
        - screen_name?
        - show your friends
      -
        - o
        - followers
        - screen_name?
        - show your followers
      -
        - w
        - show_user
        - user_id/screen_name?
        - show the user's info
    -
      -
        - d
        - direct_messages
        - count?
        - show your direct messages
    -
      -
        - e
        - create_friend
        - user_id/screen_name
        - ~
      -
        - r
        - destroy_friend
        - user_id/screen_name
        - ~
      -
        - x
        - rel_exists
        - screen_name{1,2}
        - ~
    -
      -
        - b
        - block_user
        - user_id/screen_name
        - ~
      -
        - k
        - unblock_user
        - user_id/screen_name
        - ~
      -
        - L
        - show_blocking
        - none
        - ~
      -
        - n
        - report_spam
        - user_id/screen_name
        - ~
    -
      -
        - p
        - list_memberships
        - none
        - ~
      -
        - S
        - all_lists
        - screen_name?
        - show user's lists
      -
        - E
        - list_statuses
        - list_id,screen_name?
        - show list timeline
    -
      -
        - g
        - favorites
        - screen_name?
        - show your favorites
    -
      -
        - z
        - search
        - word
        - search from tweets
    -
      -
        - c
        - change_user
        - none
        - ~
      -
        - C
        - change_config
        - item/value
        - ~
      -
        - h
        - help
        - none
        - ~
      -
        - l
        - clear_statuses
        - none
        - clear statuses cache
      -
        - v
        - favorited
        - screen_name?
        - show your favorited statuses
      -
        - q
        - quit
        - none
        - ~
